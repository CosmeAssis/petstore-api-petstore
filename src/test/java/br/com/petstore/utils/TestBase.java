package br.com.petstore.utils;

import com.aventstack.extentreports.*;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.restassured.response.ValidatableResponse;
import org.testng.ITestResult;
import org.testng.annotations.*;

import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Classe base para testes automatizados com TestNG e RestAssured.
 * Configura relat√≥rios, captura logs e gerencia informa√ß√µes de requisi√ß√£o e resposta.
 */
public abstract class TestBase {
    private static ExtentReports extent; // Objeto para gerar relat√≥rios
    protected static ExtentTest test; // Objeto para capturar logs dos testes
    protected String endpoint; // Armazena o endpoint da requisi√ß√£o atual
    protected Object requestBody; // Armazena o corpo da requisi√ß√£o
    protected ValidatableResponse response; // Armazena a resposta da API

    private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();
    private static final Map<String, Integer> testSummary = new HashMap<>(); // Contador de testes executados

    /**
     * Configura√ß√£o inicial dos relat√≥rios antes da su√≠te de testes iniciar.
     */
    @BeforeSuite
    public void setupSuite() {
        // Obt√©m configura√ß√µes do relat√≥rio a partir de propriedades externas
        String reportTitle = PropertiesLoader.getProperty("report.title", "PetStore API Test Report");
        String reportName = PropertiesLoader.getProperty("report.name", "Test Results");
        String theme = PropertiesLoader.getProperty("report.theme", "DARK");

        // Cria√ß√£o do arquivo de relat√≥rio com timestamp para evitar sobrescrita
        String timestamp = new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
        String reportFile = "target/extent-report-" + timestamp + ".html";

        // Configura√ß√£o do ExtentSparkReporter (interface do relat√≥rio)
        ExtentSparkReporter spark = new ExtentSparkReporter(reportFile);
        spark.config().setTheme(theme.equalsIgnoreCase("DARK") ? Theme.DARK : Theme.STANDARD);
        spark.config().setDocumentTitle(reportTitle + " - " + timestamp);
        spark.config().setReportName(reportName + " - " + timestamp);
        spark.config().setTimelineEnabled(true); // Ativa linha do tempo para melhor visualiza√ß√£o
        spark.config().setEncoding("UTF-8");

        // Adiciona estilos customizados para diferenciar status dos testes
        String customCSS = ".passed { background-color: #28a745; color: white; padding: 5px; } " +
                ".failed { background-color: #dc3545; color: white; padding: 5px; } " +
                ".skipped { background-color: #ffc107; color: black; padding: 5px; }";
        spark.config().setCss(customCSS);

        // Inicializa o relat√≥rio
        extent = new ExtentReports();
        extent.attachReporter(spark);
        extent.setSystemInfo("Projeto", "PetStore API");
        extent.setSystemInfo("Autor", "Equipe QA");
        extent.setSystemInfo("Linguagem", "Java 21");
        extent.setSystemInfo("Framework", "TestNG + RestAssured");

        // Inicializa contagem de testes
        testSummary.put("Passed", 0);
        testSummary.put("Failed", 0);
        testSummary.put("Skipped", 0);
    }

    /**
     * Configura cada teste antes de sua execu√ß√£o.
     * Exibe a descri√ß√£o da anota√ß√£o @Test se dispon√≠vel.
     */
    @BeforeMethod
    public void setupTest(Method method) {
        // Obt√©m a anota√ß√£o @Test do m√©todo
        Test testAnnotation = method.getAnnotation(Test.class);
        String testName = (testAnnotation != null && !testAnnotation.description().isEmpty())
                ? testAnnotation.description() // Usa a descri√ß√£o se existir
                : method.getName(); // Caso contr√°rio, usa o nome do m√©todo

        // Cria um novo registro no relat√≥rio para o teste atual
        test = extent.createTest("üìù " + testName);
        test.assignCategory(method.getDeclaringClass().getSimpleName());
        System.out.println("\nüîπ Iniciando teste: " + testName);
    }

    /**
     * Captura e registra os resultados de cada teste ap√≥s a execu√ß√£o.
     */
    @AfterMethod(alwaysRun = true)
    public void logTestResult(ITestResult result) {
        String baseUrl = PropertiesLoader.getProperty("base.url");
        long duration = (result.getEndMillis() - result.getStartMillis()) / 1000;

        System.out.println("\n===============================================");
        System.out.println("üîπ Teste: " + result.getMethod().getMethodName());

        // Registra o endpoint da requisi√ß√£o
        if (endpoint != null) {
            test.info("<b>üîó Endpoint:</b> " + baseUrl + endpoint);
            System.out.println("üîó Endpoint: " + baseUrl + endpoint);
        }

        // Registra o corpo da requisi√ß√£o
        if (requestBody != null) {
            String requestJson = gson.toJson(requestBody);
            test.info("<b>üì§ Request:</b> <pre>" + requestJson + "</pre>");
            System.out.println("üì§ Request:\n" + requestJson);
        }

        // Registra o corpo da resposta
        if (response != null) {
            String responseJson = response.extract().asPrettyString();
            test.info("<b>üì• Response:</b> <pre>" + responseJson + "</pre>");
            System.out.println("üì• Response:\n" + responseJson);
            System.out.println("üìå Status Code: " + response.extract().statusCode());
        }

        // Registra os headers da resposta (se dispon√≠veis)
        if (response != null) {
            String headers = response.extract().headers().toString();
            test.info("<b>üìå Headers:</b> <pre>" + headers + "</pre>");
            System.out.println("üìå Headers:\n" + headers);

            // Registra par√¢metros da requisi√ß√£o (se dispon√≠veis)
            String params = response.extract().cookies().toString();
            if (!params.isEmpty()) {
                test.info("<b>üõ† Par√¢metros:</b> <pre>" + params + "</pre>");
                System.out.println("üõ† Par√¢metros:\n" + params);
            }
        }

        // Registra o resultado do teste no relat√≥rio
        switch (result.getStatus()) {
            case ITestResult.SUCCESS:
                test.log(Status.PASS, "‚úÖ Teste passou com sucesso!");
                test.info("<b>Tempo de execu√ß√£o:</b> " + duration + "s");
                break;
            case ITestResult.FAILURE:
                test.log(Status.FAIL, "‚ùå Teste falhou: " + result.getThrowable().getMessage());
                test.info("<b>Tempo de execu√ß√£o:</b> " + duration + "s");
                break;
            case ITestResult.SKIP:
                test.log(Status.SKIP, "‚ö†Ô∏è Teste pulado.");
                test.info("<b>Tempo de execu√ß√£o:</b> " + duration + "s");
                break;
        }

        System.out.println("===============================================\n");
    }

    /**
     * Finaliza o relat√≥rio e exibe um sum√°rio dos testes.
     */
    @AfterSuite
    public void tearDownSuite() {
        // Configura an√°lise de testes por categoria
        extent.setAnalysisStrategy(AnalysisStrategy.CLASS);

        // Gera o relat√≥rio final
        extent.flush();
        System.out.println("\nüìä Relat√≥rio gerado: target/extent-report.html");
    }

    /**
     * Configura detalhes da requisi√ß√£o antes da execu√ß√£o do teste.
     *
     * @param endpoint     Endpoint da API
     * @param requestBody  Corpo da requisi√ß√£o
     * @param response     Resposta da API
     */
    protected void setTestDetails(String endpoint, Object requestBody, ValidatableResponse response) {
        this.endpoint = endpoint;
        this.requestBody = requestBody;
        this.response = response;
    }
}